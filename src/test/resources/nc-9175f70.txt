diff --git a/build.gradle b/build.gradle
index d9b5e87..eb08d0f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -35,11 +35,6 @@ repositories {
         url 'http://nexus.hc.to/content/repositories/pub_releases'
     }
 
-    maven {
-        name 'nu-langchecker'
-        url 'https://raw.githubusercontent.com/Librazy/NyaaUtilsLangChecker/maven-repo'
-    }
-
     maven {
         name 'ess-repo'
         url 'http://repo.ess3.net/content/groups/essentials'
@@ -59,9 +54,9 @@ dependencies {
     api "org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT"
     api 'javax.persistence:javax.persistence-api:2.2'
     shadow 'javax.persistence:javax.persistence-api:2.2'
-    annotationProcessor 'org.librazy:NyaaUtilsLangChecker:2.0-SNAPSHOT'
+    annotationProcessor files('lib/NyaaUtilsLangChecker.jar')
     annotationProcessor "org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT"
-    compileOnly 'org.librazy:NyaaUtilsLangChecker:2.0-SNAPSHOT'
+    compileOnly files('lib/NyaaUtilsLangChecker.jar')
     compileOnly('net.milkbowl.vault:VaultAPI:1.6') {
         transitive = false
     }
@@ -76,7 +71,7 @@ dependencies {
 }
 
 compileJava {
-    options.compilerArgs += ["-Xplugin:NyaaUtilsLangAnnotationProcessor", "-Xlint:deprecation,unchecked,rawtypes"]
+    options.compilerArgs += ["-Xplugin:NyaaUtilsLangAnnotationProcessor", "-Xlint:deprecation,unchecked,rawtypes", "-ALANG_SHOW_DEBUG=true"]
 }
 
 publishing {
diff --git a/src/main/java/cat/nyaa/nyaacore/CommandReceiver.java b/src/main/java/cat/nyaa/nyaacore/CommandReceiver.java
index 288f4d1..f2275d0 100644
--- a/src/main/java/cat/nyaa/nyaacore/CommandReceiver.java
+++ b/src/main/java/cat/nyaa/nyaacore/CommandReceiver.java
@@ -138,7 +138,7 @@ public abstract class CommandReceiver implements CommandExecutor, TabCompleter {
                     subCommandClasses.put(subCommandName, obj);
                     if (!anno.permission().isEmpty()) subCommandPermission.put(subCommandName, anno.permission());
                 } catch (ReflectiveOperationException ex) {
-                    plugin.getLogger().warning(i18n.getFormatted("internal.error.bad_subcommand", f.toString()));
+                    plugin.getLogger().warning(i18n.getFormatted("internal.error.lc_test1", f.toString()));
                     ex.printStackTrace();
                 }
             } else {
@@ -209,9 +209,9 @@ public abstract class CommandReceiver implements CommandExecutor, TabCompleter {
                 else
                     throw new RuntimeException("Failed to invoke subcommand", ex);
             }
-            if (!subClassCommand) msg(sender, "internal.info.command_complete");
+            if (!subClassCommand) msg(sender, "internal.lc_test6.command_complete");
         } catch (NotPlayerException ex) {
-            msg(sender, "internal.error.not_player");
+            msg(sender, "internal.error.lc_test4");
         } catch (NoItemInHandException ex) {
             msg(sender, ex.isOffHand ? "internal.error.no_item_offhand" : "internal.error.no_item_hand");
         } catch (BadCommandException ex) {
@@ -431,7 +431,7 @@ public abstract class CommandReceiver implements CommandExecutor, TabCompleter {
 
         public int nextInt() {
             String str = next();
-            if (str == null) throw new BadCommandException("internal.error.no_more_int");
+            if (str == null) throw new BadCommandException("internal.error.lc_test2");
             if (str.endsWith("k")) str = str.substring(0, str.length() - 1) + "000";
             try {
                 return Integer.parseInt(str);
@@ -469,7 +469,7 @@ public abstract class CommandReceiver implements CommandExecutor, TabCompleter {
                     throw new BadCommandException("internal.error.no_more_double");
                 return Double.parseDouble(new DecimalFormat(pattern).format(d));
             } catch (NumberFormatException ex) {
-                throw new BadCommandException("internal.error.bad_double", ex, str);
+                throw new BadCommandException("lc_test5.error.bad_double", ex, str);
             } catch (IllegalArgumentException ex) {
                 throw new BadCommandException("internal.error.bad_decimal_pattern", ex, pattern);
             }
@@ -561,16 +561,16 @@ public abstract class CommandReceiver implements CommandExecutor, TabCompleter {
         /**
          * get named argument as integer
          *
-         * @param key argument name
+         * @param lc_test3 argument name
          * @return int value
          */
-        public int argInt(String key) {
-            String str = argString(key);
+        public int argInt(String lc_test3) {
+            String str = argString(lc_test3);
             if (str.endsWith("k")) str = str.substring(0, str.length() - 1) + "000";
             try {
                 return Integer.parseInt(str);
             } catch (NumberFormatException ex) {
-                throw new BadCommandException("internal.named_argument.not_int", ex, key, str);
+                throw new BadCommandException("internal.named_argument.not_int", ex, lc_test3);
             }
         }
 
